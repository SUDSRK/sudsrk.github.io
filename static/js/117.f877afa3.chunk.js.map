{"version":3,"file":"static/js/117.f877afa3.chunk.js","mappings":"iLAIA,MAAMA,EAAgBC,GAGT,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,OAGzBC,EAAW,CACf,uBACA,sBAqBIC,EAAYC,IAAsB,IAArB,YAAEC,GAAaD,EAChC,MAGOE,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASN,EAASI,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAAS,IAC7BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GAuBzC,MAhDkBO,EAACC,EAAUC,KAC7B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,KACRF,EAAcG,QAAUL,CAAQ,GAC/B,CAACA,KAEJI,EAAAA,EAAAA,YAAU,KACR,GAAIH,EAAO,CACT,MAAMK,EAAKC,aAAY,KACrBL,EAAcG,SAAS,GACtBJ,GACH,MAAO,IAAMO,cAAcF,EAC7B,CACA,MAAO,MAAQ,GACd,CAACL,GAAO,EAYXF,EAAY,KACV,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAXO,IAWQT,EAASI,GAAKL,SAC/BwB,GAAU,EACVC,EAAU,GAERD,IAAWvB,EAASD,OAClBI,GACFE,EAAW,GACXK,EAAW,IAEXE,GAAY,IAGdJ,EAAcR,EAASuB,GAAQE,MAAM,EAAGD,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,GACvB,GACCb,EA1BW,GA0BQ,OAGpBe,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,MAAOhC,EAAaW,GAAW,CAAC,EAAI,CAAEsB,MAAO,OAC7CC,aAAcA,IAAMlB,GAAY,GAChCmB,aAAcA,IAAO3B,EAAMJ,EAASD,QAAWa,GAAY,GAAMoB,UAEjEN,EAAAA,EAAAA,KAAA,KAAGO,KAAMrC,EAAaW,GAAQ,6CAAA2B,OAAgD3B,GAAY,GAAGyB,UAC3FN,EAAAA,EAAAA,KAAA,QAAAM,SAAOzB,OAGL,EAIVN,EAAUkC,aAAe,CACvBhC,aAAa,GAOf,U,YChFA,MAuBA,EAvBgBiC,KACdV,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,oDAAmDP,UAE/DQ,EAAAA,EAAAA,MAAA,WAASb,UAAU,OAAOP,GAAG,UAASY,SAAA,EACpCN,EAAAA,EAAAA,KAAA,UAAAM,UACEN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOK,UACpBN,EAAAA,EAAAA,KAAA,MAAAM,UAAIN,EAAAA,EAAAA,KAACe,EAAAA,GAAI,CAACC,GAAG,WAAUV,SAAC,sBAG5BQ,EAAAA,EAAAA,MAAA,OAAKb,UAAU,WAAUK,SAAA,EACvBN,EAAAA,EAAAA,KAAA,KAAAM,SAAG,uFACHN,EAAAA,EAAAA,KAACzB,EAAS,QAEZuC,EAAAA,EAAAA,MAAA,OAAKb,UAAU,WAAUK,SAAA,EACzBN,EAAAA,EAAAA,KAAA,KAAAM,SAAG,6BACHN,EAAAA,EAAAA,KAACiB,EAAAA,EAAY,W","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'I-have-a-Job-for-you',\n  'Please-work-for-us',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      if (loopMessage) {\n        updateIter(0);\n        updateChar(0);\n      } else {\n        setIsActive(false);\n      }\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? `mailto:sudarshansuccess@gmail.com?subject=${message}` : ''}>\n        <span>{message}</span>\n        {/* <span>@gmail.com</span> */}\n      </a>\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: false,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Me via email @ sudarshansuccess@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2><Link to=\"/contact\">Contact Me</Link></h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>In case you have a job for me. Or a Freelancing Oppurtunity. You can click here: </p>\n        <EmailLink />\n      </div>\n      <div className=\"email-at\">\n      <p>Or we can connect here:</p>\n      <ContactIcons />\n      </div>\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["validateText","text","test","length","messages","EmailLink","_ref","loopMessage","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","href","concat","defaultProps","Contact","Main","title","description","_jsxs","Link","to","ContactIcons"],"sourceRoot":""}